# This file installs DMGs and declares associated capabilities
# For each defined DMG,
# - it transfers the DMG to the host
# - it opens/mounts the DMG, it may also remove any interactive mounting feature of the DMG during the mounting
# - it runs a specific installation script, replacing on the fly the "${mount}" substring by the true mounting location
# - it declares the associated capabilities, if any
# - it cleans up


# OSX specific stuff

- block:
  - include_tasks: check_vars.yml
    tags:
      - bambooagent:checks
      - checks

  - name: '[DMG] transfer the installers'
    copy:
      src: "{{ dmg_to_install.file }}"
      dest: "/tmp/{{ dmg_to_install.file | basename }}"

  - name: '[DMG] remove interactive - checks'
    file:
      path="/tmp/{{ dmg_to_install.file | basename }}.nointeractive.cdr"
      state=absent
    when: (dmg_to_install.remove_interactive is defined) and dmg_to_install.remove_interactive

  - name: '[DMG] remove interactive'
    command: hdiutil convert "/tmp/{{ dmg_to_install.file | basename }}" -format UDTO -o "/tmp/{{ dmg_to_install.file  | basename }}.nointeractive.cdr"
    when: (dmg_to_install.remove_interactive is defined) and dmg_to_install.remove_interactive


  - name: '[DMG] mount the installers'
    shell: hdiutil attach "/tmp/{{ dmg_to_install.file | basename }}{{ ('remove_interactive' in dmg_to_install and dmg_to_install.remove_interactive) | ternary('.nointeractive.cdr', '') }}" -mountpoint "/tmp/tmpmount_{{ dmg_to_install.file | basename | hash('sha1') }}"
    with_items:
      - dmg_to_install

  - name: '[DMG] get the mount point informations'
    shell: hdiutil info
    register: hdiutil_mounts

  - name: '[DMG] mount points'
    debug:
      msg="{{ hdiutil_mounts.stdout_lines }}"

  - name: '[DMG] run the installers'
    shell: "{{ dmg_to_install.install_cmd.replace('${mount}', '/tmp/tmpmount_' + (dmg_to_install.file | basename | hash('sha1'))) }}"

  when: ansible_distribution=="MacOSX"

  rescue:
    - debug:
        msg="An error occured"
    - command: /bin/false

  always:
    - name: '[DMG] detach all'
      shell: hdiutil detach "/tmp/tmpmount_{{ dmg_to_install.file | basename | hash('sha1') }}"

    - file:
        path="/tmp/{{ dmg_to_install.file | basename }}"
        state=absent

    - file:
        path="/tmp/{{ dmg_to_install.file | basename }}.nointeractive.cdr"
        state=absent
      when: (dmg_to_install.remove_interactive is defined) and dmg_to_install.remove_interactive
